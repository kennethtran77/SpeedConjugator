{"version":3,"sources":["components/Pronouns.js","components/Tenses.js","components/VerbTags.js","components/Verbs.js","components/Sidebar.js","constants.js","components/Card.js","App.js","index.js"],"names":["Pronouns","id","this","props","createTogglebox","React","Component","Tenses","Lefff","require","verbs","Object","keys","VerbTags","handleKeyDown","bind","event","verb","target","value","toLowerCase","verbList","getVerbList","key","find","item","includes","some","alert","tagInput","addToVerbList","length","removeFromVerbList","className","map","tag","i","type","onClick","onKeyDown","ref","c","Verbs","Sidebar","state","currentDropdown","newDropdown","setState","category","elementId","innerHTML","atleastOne","checked","getChecked","onChange","toggleChecked","htmlFor","updateDropdown","tenses","displayName","pronouns","index","gender","number","genders","numbers","FrenchVerbs","Card","seen","correct","incorrect","currentPronoun","currentGender","currentNumber","currentTense","chooseRandomTense","currentVerb","currentReflexive","inputState","handleSubmit","handleChange","randomize","e","preventDefault","correctAnswer","getCorrectAnswer","userAnswer","trim","normalize","replace","delay","setTimeout","pronounObject","params","alwaysAuxEtre","reflexive","isTransitive","getConjugation","newTense","newPronoun","chooseRandomPronoun","newVerb","chooseRandomVerb","newReflexive","newGender","Math","floor","random","newNumber","randomKey","W","tense","choices","getKeys","pronoun","round","onSubmit","icon","title","autoComplete","disabled","calculateRatio","library","add","faCheckCircle","faTimesCircle","faEye","faPercent","faUsers","faUser","faMars","faVenus","faSync","faRandom","App","checkedCount","k","newChecked","categoryObject","filter","newVerbs","slice","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.feee3d5c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Pronouns extends React.Component {\r\n    render() {\r\n        return (\r\n            <div id=\"dropdown\">\r\n                <h2>Pronouns</h2>\r\n                { this.props.createTogglebox('pronouns', 'je', 'je', 'Je') }\r\n                { this.props.createTogglebox('pronouns', 'tu', 'tu', 'Tu') }\r\n                { this.props.createTogglebox('pronouns', 'il/elle/on', 'il-elle-on', 'Il/Elle/On') }\r\n                { this.props.createTogglebox('pronouns', 'nous', 'nous', 'Nous') }\r\n                { this.props.createTogglebox('pronouns', 'vous', 'vous', 'Vous') }\r\n                { this.props.createTogglebox('pronouns', 'ils/elles', 'ils-elles', 'Ils/Elles') }\r\n                {/* <div className=\"options\">\r\n                    <input\r\n                        type=\"checkbox\" id=\"je\" value=\"je\"\r\n                        checked={this.props.getChecked('pronouns', 'je')}\r\n                        onChange={() => this.props.toggleChecked('pronouns', 'je')}/>\r\n                    <label htmlFor=\"je\">Je</label>\r\n                    <br/>\r\n                    <input\r\n                        type=\"checkbox\" id=\"tu\" value=\"tu\"\r\n                        checked={this.props.getChecked('pronouns', 'tu')}\r\n                        onChange={() => this.props.toggleChecked('pronouns', 'tu')}/>\r\n                    <label htmlFor=\"tu\">Tu</label>\r\n                    <br/>\r\n                    <input\r\n                        type=\"checkbox\" id=\"il-elle\" value=\"il/elle\"\r\n                        checked={this.props.getChecked('pronouns', 'il/elle')}\r\n                        onChange={() => this.props.toggleChecked('pronouns', 'il/elle')}/>\r\n                    <label htmlFor=\"il-elle\">Il/Elle</label>\r\n                    <br/>\r\n                    <input\r\n                        type=\"checkbox\" id=\"nous\" value=\"nous\"\r\n                        checked={this.props.getChecked('pronouns', 'nous')}\r\n                        onChange={() => this.props.toggleChecked('pronouns', 'nous')}/>\r\n                    <label htmlFor=\"nous\">Nous</label>\r\n                    <br/>\r\n                    <input\r\n                        type=\"checkbox\" id=\"vous\" value=\"vous\"\r\n                        checked={this.props.getChecked('pronouns', 'vous')}\r\n                        onChange={() => this.props.toggleChecked('pronouns', 'vous')}/>\r\n                    <label htmlFor=\"vous\">Vous</label>\r\n                    <br/>\r\n                    <input\r\n                        type=\"checkbox\" id=\"ils-elles\" value=\"ils/elles\"\r\n                        checked={this.props.getChecked('pronouns', 'ils/elles')}\r\n                        onChange={() => this.props.toggleChecked('pronouns', 'ils/elles')}/>\r\n                    <label htmlFor=\"ils-elles\">Ils/Elles</label>\r\n                </div> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pronouns;","import React from 'react';\r\n\r\nclass Tenses extends React.Component {\r\n    render() {\r\n        return (\r\n            <div id=\"dropdown\">\r\n                <h2>Tenses</h2>\r\n                <h3>Indicatif</h3>\r\n                { this.props.createTogglebox('tenses', 'PRESENT', 'present-indicatif', 'Présent') }\r\n                { this.props.createTogglebox('tenses', 'PASSE_COMPOSE', 'passe-compose', 'Passé Composé') }\r\n                { this.props.createTogglebox('tenses', 'IMPARFAIT', 'imparfait-indicatif', 'Imparfait') }\r\n                { this.props.createTogglebox('tenses', 'PASSE_SIMPLE', 'passe-simple', 'Passé Simple') }\r\n                { this.props.createTogglebox('tenses', 'PLUS_QUE_PARFAIT', 'plus-que-parfait', 'Plus-Que-Parfait') }\r\n                { this.props.createTogglebox('tenses', 'CONDITIONNEL_PRESENT', 'conditionnel-present', 'Conditionnel Présent') }\r\n                <h3>Subjonctif</h3>\r\n                { this.props.createTogglebox('tenses', 'SUBJONCTIF_PRESENT', 'present-subjonctif', 'Subjonctif Présent') }\r\n                { this.props.createTogglebox('tenses', 'SUBJONCTIF_IMPARFAIT', 'imparfait-subjonctif', 'Subjonctif Imparfait') }\r\n                <h3>Impératif</h3>\r\n                { this.props.createTogglebox('tenses', 'IMPERATIF_PRESENT', 'present-imperatif', 'Présent') }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tenses;","import React from 'react';\r\n\r\nimport './VerbTags.css';\r\n\r\nconst Lefff = require('french-verbs-lefff/dist/conjugations.json');\r\nconst verbs = Object.keys(Lefff);\r\n\r\nclass VerbTags extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleKeyDown = this.handleKeyDown.bind(this);\r\n    }\r\n\r\n    handleKeyDown(event) {\r\n        const verb = event.target.value.toLowerCase();\r\n        const verbList = this.props.getVerbList();\r\n\r\n        if (event.key === 'Enter' && verb) {\r\n            // Check if tag exists\r\n            if (verbList.find(item => item.toLowerCase() === verb))\r\n                return;\r\n            \r\n            // Check if this tag is a verb or has incomplete data\r\n            if (!verbs.includes(verb) || verbs.some(key => verbs[verb] === null)) {\r\n                alert(\"The verb \\\"\" + verb + \"\\\" was not found.\");\r\n                return;\r\n            }\r\n\r\n            this.tagInput.value = null;\r\n            this.props.addToVerbList(verb);\r\n        } else if (event.key === 'Backspace' && !verb) {\r\n            if (verbList.length > 0)\r\n                this.props.removeFromVerbList(verbList[verbList.length - 1]);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const verbList = this.props.getVerbList();\r\n\r\n        return (\r\n            <div className=\"verb-tags\">\r\n                <ul>\r\n                    { verbList.map((tag, i) => (\r\n                        <li key={tag}>\r\n                            {tag} <button type=\"button\" onClick={() => this.props.removeFromVerbList(tag) }></button>\r\n                        </li>\r\n                    ))}\r\n                    <li className=\"verb-tags-input\">\r\n                        <input type=\"text\" onKeyDown={this.handleKeyDown} ref={c => this.tagInput = c}></input>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default VerbTags;","import React from 'react';\r\nimport VerbTags from './VerbTags'\r\n\r\nclass Verbs extends React.Component {\r\n    render() {\r\n        return (\r\n            <div id=\"dropdown\">\r\n                <h2>Verbs</h2>\r\n                { this.props.createTogglebox('verbs', 'reflexive', 'reflexive', 'Reflexive Verbs', false) }\r\n                { this.props.createTogglebox('verbs', 'ignore-accents', 'ignore-accents', 'Ignore Accents', false) }\r\n                <br></br>\r\n                <h3>Verb List</h3>\r\n                <VerbTags\r\n                    addToVerbList={this.props.addToVerbList}\r\n                    removeFromVerbList={this.props.removeFromVerbList}\r\n                    getVerbList={this.props.getVerbList}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Verbs;","import React from 'react';\r\n\r\nimport Pronouns from './Pronouns';\r\nimport Tenses from './Tenses';\r\nimport Verbs from './Verbs';\r\n\r\nimport './Sidebar.css';\r\n\r\nclass Sidebar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentDropdown: ''\r\n        };\r\n        \r\n        this.createTogglebox = this.createTogglebox.bind(this);\r\n    }\r\n\r\n    updateDropdown(newDropdown) {\r\n        this.setState({ currentDropdown: this.state.currentDropdown === newDropdown ? '' : newDropdown });\r\n    }\r\n\r\n    /*\r\n    Return a togglebox to control keys within App.state.checked.\r\n\r\n    category: The category of this togglebox.\r\n        e.g. tense, pronoun, verb\r\n    key: The keyname of this togglebox. Should correspond to a key in App.state.checked.\r\n        e.g. PRESENT, IMPARFAIT, reflexive\r\n    elementId: The HTML element ID for this togglebox.\r\n        e.g. present-indicatif\r\n    innerHTML: The displayname for this togglebox.\r\n        e.g. Présent Indicatif\r\n    atleastOne: Require whether or not at least one togglebox of this category must be activated at all times.\r\n    */\r\n    createTogglebox(category, key, elementId, innerHTML, atleastOne = true) {\r\n        return (\r\n            <div>\r\n                <input\r\n                    type=\"checkbox\" id={elementId} value={key}\r\n                    checked={this.props.getChecked(category, key)}\r\n                    onChange={() => this.props.toggleChecked(category, key, atleastOne)}/>\r\n                <label htmlFor={elementId}>{innerHTML}</label>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"sidebar-root\">\r\n                <div id=\"sidebar\">\r\n                    <button onClick={() => this.updateDropdown('pronouns')}>Pronouns</button>\r\n                    <button onClick={() => this.updateDropdown('tenses')}>Tenses</button>\r\n                    <button onClick={() => this.updateDropdown('verbs')}>Verbs</button>\r\n                </div>\r\n                { this.state.currentDropdown === 'pronouns' &&\r\n                    <Pronouns createTogglebox={this.createTogglebox}\r\n                />}\r\n                { this.state.currentDropdown === 'tenses' &&\r\n                    <Tenses createTogglebox={this.createTogglebox} \r\n                />}\r\n                { this.state.currentDropdown === 'verbs' &&\r\n                    <Verbs\r\n                        createTogglebox={this.createTogglebox}\r\n                        addToVerbList={this.props.addToVerbList}\r\n                        removeFromVerbList={this.props.removeFromVerbList}\r\n                        getVerbList={this.props.getVerbList}\r\n                    />\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Sidebar;","export const tenses = {\r\n    // Indicatif\r\n    'PRESENT': { displayName: 'Présent Indicatif' },\r\n    'PASSE_COMPOSE': { displayName: 'Passé Composé' },\r\n    'IMPARFAIT': { displayName: 'Imparfait Indicatif' },\r\n    'PASSE_SIMPLE': { displayName: 'Passé Simple' },\r\n    'PLUS_QUE_PARFAIT': { displayName: 'Plus-Que-Parfait' },\r\n    // Conditionnel\r\n    'CONDITIONNEL_PRESENT': { displayName: 'Conditionnel Présent' },\r\n    // Subjonctif\r\n    'SUBJONCTIF_PRESENT': { displayName: 'Présent Subjonctif' },\r\n    'SUBJONCTIF_IMPARFAIT': { displayName: 'Imparfait Subjonctif' },\r\n    // Imperatif\r\n    'IMPERATIF_PRESENT': { displayName: 'Présent Imperatif' },\r\n};\r\n  \r\n// gender: 'A' - any, 'M' - male, 'F' - female\r\n// number: 'A' - any, 'S' - single, 'P' - plural \r\nexport const pronouns = {\r\n    'je': {\r\n        index: 0,\r\n        gender: 'A',\r\n        number: 'S'\r\n    },\r\n    'tu': {\r\n        index: 1,\r\n        gender: 'A',\r\n        number: 'S'\r\n    },\r\n    'il': {\r\n        index: 2,\r\n        gender: 'M',\r\n        number: 'S'\r\n    },\r\n    'elle': {\r\n        index: 2,\r\n        gender: 'F',\r\n        number: 'S'\r\n    },\r\n    'on': {\r\n        index: 2,\r\n        gender: 'A',\r\n        number: 'P'\r\n    },\r\n    'nous': {\r\n        index: 3,\r\n        gender: 'A',\r\n        number: 'P'\r\n    },\r\n    'vous': {\r\n        index: 4,\r\n        gender: 'A',\r\n        number: 'A'\r\n    },\r\n    'ils': {\r\n        index: 5,\r\n        gender: 'M',\r\n        number: 'P'\r\n    },\r\n    'elles': {\r\n        index: 5,\r\n        gender: 'F',\r\n        number: 'P'\r\n    }\r\n};\r\n\r\nexport const genders = ['M', 'F'];\r\nexport const numbers = ['S', 'P'];","import React from 'react';\r\n\r\nimport './Card.css';\r\n\r\nimport { tenses, pronouns, numbers, genders } from '../constants.js';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst FrenchVerbs = require('french-verbs');\r\nconst Lefff = require('french-verbs-lefff/dist/conjugations.json');\r\n\r\nconst verbs = Object.keys(Lefff);\r\n\r\nclass Card extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            seen: 0,\r\n            correct: 0,\r\n            incorrect: 0,\r\n            value: '',\r\n            currentPronoun: '',\r\n            currentGender: '',\r\n            currentNumber: '',\r\n            currentTense: this.chooseRandomTense(),\r\n            currentVerb: '',\r\n            currentReflexive: false,\r\n            inputState: 'waiting' // 'waiting', 'correct', 'incorrect'\r\n        };\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    // Randomize the card upon component mounting\r\n    componentDidMount() {\r\n        this.randomize();\r\n    }\r\n\r\n    // Handle changes to the text input\r\n    handleChange(e) {\r\n        if (this.state.inputState === 'waiting') {\r\n            this.setState({\r\n                value: e.target.value\r\n            })\r\n        }\r\n    }\r\n\r\n    // Handle submit\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        // Do nothing if the input state is in 'waiting' mode\r\n        if (this.state.inputState !== 'waiting')\r\n            return;\r\n\r\n        // Fetch the correct answer and user's answer\r\n        let correctAnswer = this.getCorrectAnswer();\r\n        let userAnswer = this.state.value.toLowerCase().trim();\r\n\r\n        // Check if accents are to be ignored\r\n        if (this.props.getChecked('verbs', 'ignore-accents')) {\r\n            // Strip answers of accents\r\n            correctAnswer = correctAnswer.normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\");\r\n            userAnswer = userAnswer.normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\");\r\n        }\r\n\r\n        let delay = 1000;\r\n        \r\n        if (userAnswer === correctAnswer) {\r\n            this.setState({\r\n                inputState: 'correct',\r\n                correct: this.state.correct + 1\r\n            });\r\n        } else {\r\n            this.setState({\r\n                inputState: 'incorrect',\r\n                incorrect: this.state.incorrect + 1\r\n            });\r\n            delay = 3000;\r\n        }\r\n\r\n        // Two second delay\r\n        setTimeout(function() {\r\n            // Update stats\r\n            this.setState({\r\n                inputState: 'waiting'\r\n            });\r\n\r\n            // Randomize the card\r\n            this.randomize();\r\n        }.bind(this),\r\n        delay);\r\n    }\r\n\r\n    // Return the correct answer given the current card state\r\n    getCorrectAnswer() {\r\n        let pronounObject = pronouns[this.state.currentPronoun];\r\n\r\n        let params = {\r\n            'aux': FrenchVerbs.alwaysAuxEtre(this.state.currentVerb) ? 'ETRE' : 'AVOIR'\r\n        }\r\n\r\n        // reflexive verbs must be transitive\r\n        let reflexive = FrenchVerbs.isTransitive(this.state.currentVerb) && this.state.currentReflexive;\r\n\r\n        if (reflexive) {\r\n            params['aux'] = 'ETRE';\r\n            params['agreeGender'] = this.state.currentGender;\r\n            params['agreeNumber'] = this.state.currentNumber;\r\n        }\r\n\r\n        // Fetch the conjugation\r\n        return FrenchVerbs.getConjugation(Lefff, this.state.currentVerb, this.state.currentTense, pronounObject.index, params, reflexive);\r\n    }\r\n\r\n    // Randomize the card by choosing a new tense, pronoun, verb, and reflexiveness\r\n    randomize() {\r\n        let newTense = this.chooseRandomTense();\r\n        let newPronoun = this.chooseRandomPronoun(newTense);\r\n        let newVerb = this.chooseRandomVerb();\r\n        let newReflexive = this.props.getChecked('verbs', 'reflexive') && FrenchVerbs.isTransitive(newVerb) && newTense !== 'IMPERATIF_PRESENT';\r\n\r\n        // If gender or number of the new pronoun is `any`, then pick a random one\r\n        let newGender = pronouns[newPronoun].gender === 'A' ? genders[Math.floor(Math.random() * genders.length)] : pronouns[newPronoun].gender;\r\n        let newNumber = pronouns[newPronoun].number === 'A' ? numbers[Math.floor(Math.random() * numbers.length)] : pronouns[newPronoun].number;\r\n\r\n        this.setState({\r\n            seen: this.state.seen + 1,\r\n            value: '',\r\n            currentPronoun: newPronoun,\r\n            currentGender: newGender,\r\n            currentNumber: newNumber,\r\n            currentTense: newTense,\r\n            currentVerb: newVerb,\r\n            currentReflexive: newReflexive\r\n        });\r\n    }\r\n\r\n    // Generate a random verb. If the user inputted verb list is not empty, pick from there.\r\n    // Otherwise, pick from the database\r\n    chooseRandomVerb() {\r\n        const verbList = this.props.getVerbList();\r\n\r\n        // Choose a random verb from the whole database if the verb list is empty\r\n        if (verbList.length <= 0) {\r\n            let randomKey = Lefff[verbs[verbs.length * Math.random() << 0]];\r\n\r\n            // Prevent selecting verbs with incomplete data\r\n            while (verbs.some(key => verbs[key] === null))\r\n                randomKey = Lefff[verbs[verbs.length * Math.random() << 0]];\r\n    \r\n            return randomKey.W[0];\r\n        } else {\r\n            // Choose a random verb from the user inputted verb list\r\n            let randomKey = verbList[Math.floor(Math.random() * verbList.length)];\r\n            return randomKey;\r\n        }\r\n    }\r\n\r\n    chooseRandomPronoun(tense) {\r\n        // Impératif only allows for 'tu' or 'vous'\r\n        let choices = tense === 'IMPERATIF_PRESENT' ? ['tu', 'vous'] : this.props.getKeys('pronouns', true);\r\n\r\n        // Select pronoun\r\n        let pronoun = choices[Math.floor(Math.random() * choices.length)];\r\n\r\n        // Pick between il/elle/on or ils/elles\r\n        if (pronoun === 'il/elle/on')\r\n            return ['il', 'elle', 'on'][Math.floor(Math.random() * 3)];\r\n        else if (pronoun === 'ils/elles')\r\n            return ['ils', 'elles'][Math.floor(Math.random() * 2)];\r\n\r\n        return pronoun;\r\n    }\r\n\r\n    chooseRandomTense() {\r\n        let tenses = this.props.getKeys('tenses', true);\r\n        let randomIndex = Math.floor(Math.random() * tenses.length);\r\n        return tenses[randomIndex];\r\n    }\r\n\r\n    calculateRatio() {\r\n        let ratio = 0;\r\n\r\n        if (this.state.correct === 0 & this.state.incorrect === 0) {\r\n            ratio = 0;\r\n        } else {\r\n            ratio = Math.round((this.state.correct / this.state.incorrect) * 100) / 100;\r\n        }\r\n\r\n        return ratio;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"card-root\">\r\n                <div id=\"card\">\r\n                    <h3 id='tense'>{ tenses[this.state.currentTense].displayName }</h3>\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <div id=\"meta\">\r\n                            <div id=\"pronoun\">{ this.state.currentPronoun }</div>\r\n                            <div id=\"gender\"> { this.state.currentGender === 'M' ? <FontAwesomeIcon icon='mars' title='Male'/> : <FontAwesomeIcon icon='venus' title='Female' /> } </div>\r\n                            <div id=\"number\"> { this.state.currentNumber === 'S' ? <FontAwesomeIcon icon='user' title='Singular' /> : <FontAwesomeIcon icon='users' title='Plural' /> } </div>\r\n                            <div id=\"reflexive\">{ this.state.currentReflexive && <FontAwesomeIcon icon='sync' title='Reflexive' /> }</div>\r\n                        </div>\r\n                        <input\r\n                            id=\"input\"\r\n                            type=\"text\"\r\n                            value={this.state.value}\r\n                            onChange={this.handleChange}\r\n                            className={this.state.inputState}\r\n                            autoComplete=\"off\">\r\n                        </input>\r\n                        <div id=\"verb\">({this.state.currentVerb})</div>\r\n                        <button\r\n                            type='button'\r\n                            id=\"randomize\"\r\n                            title='Randomize'\r\n                            onClick={() => this.randomize()}\r\n                            disabled={this.state.inputState !== 'waiting'} >\r\n                        <FontAwesomeIcon icon='random' />\r\n                        </button>\r\n                    </form>\r\n                    { this.state.inputState === 'incorrect' && \r\n                    <div className=\"v-margin\">\r\n                        Correct answer:\r\n                        <span id=\"correct-answer\"> {this.getCorrectAnswer()}</span>\r\n                    </div>\r\n                    }\r\n                    <div id=\"stats\">\r\n                        <h4><FontAwesomeIcon icon='eye' title='Seen' /> {this.state.seen}</h4>\r\n                        <h4><FontAwesomeIcon icon='check-circle' title='Correct' /> {this.state.correct}</h4>\r\n                        <h4><FontAwesomeIcon icon='times-circle' title='Incorrect' /> {this.state.incorrect}</h4>\r\n                        <h4><FontAwesomeIcon icon='percent' title='Correct/Incorrect Ratio' /> {this.calculateRatio()}</h4>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Card;","import React from 'react';\n\nimport Sidebar from './components/Sidebar';\nimport Card from './components/Card';\n\nimport './App.css';\n\nimport { tenses } from './constants.js';\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faCheckCircle, faTimesCircle, faEye, faPercent, faUsers, faUser, faMars, faVenus, faSync, faRandom } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faCheckCircle, faTimesCircle, faEye, faPercent, faUsers, faUser, faMars, faVenus, faSync, faRandom );\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      checked: {\n        tenses: { },\n        pronouns: {\n          'je': true,\n          'tu': true,\n          'il/elle/on': true,\n          'nous': true,\n          'vous': true,\n          'ils/elles': true\n        },\n        verbs: {\n          'reflexive': false,\n          'ignore-accents': false,\n        }\n      },\n      verbList: []\n    }\n\n    this.state.checked['tenses'][Object.keys(tenses)[0]] = true;\n\n    // Bind functions\n    this.getChecked = this.getChecked.bind(this);\n    this.toggleChecked = this.toggleChecked.bind(this);\n    this.getKeys = this.getKeys.bind(this);\n\n    this.getVerbList = this.getVerbList.bind(this);\n    this.addToVerbList = this.addToVerbList.bind(this);\n    this.removeFromVerbList = this.removeFromVerbList.bind(this);\n  }\n\n  toggleChecked(category, key, atleastOne = true) {\n    // Make sure at least one checkbox is checked at all times for the given category\n    if (atleastOne && this.state.checked[category][key]) {\n      let checkedCount = 1;\n\n      for (let k in this.state.checked[category])\n        if (k !== key)\n          if (this.state.checked[category][k])\n            checkedCount += 1;\n\n      if (checkedCount === 1)\n        return;\n    }\n\n    // clone checked object\n    let newChecked = { ...this.state.checked };\n\n    // Mutate array nested in the new checked object\n    newChecked[category][key] = !newChecked[category][key];\n\n    this.setState({ checked: newChecked });\n  }\n\n  // Return whether the key within the given category is checked\n  getChecked(category, key) {\n    return this.state.checked[category][key];\n  }\n\n  // Return an array representing the keys from a category from 'checked'\n  getKeys(category, checked) {\n    let categoryObject = this.state.checked[category];\n    return checked ? Object.keys(categoryObject).filter(key => categoryObject[key]) : Object.keys(categoryObject);\n  }\n\n  // Add a verb to the verb list\n  addToVerbList(verb) {\n    const newVerbs = [ ...this.state.verbList, verb ];\n    this.setState({ verbList: newVerbs });\n  }\n\n  // Remove a verb from the verb list\n  removeFromVerbList(verb) {\n    const newVerbs = this.state.verbList.filter(e => e !== verb);\n    this.setState({ verbList: newVerbs });\n  }\n\n  // Return the array of verblist\n  getVerbList() {\n    return this.state.verbList.slice();\n  }\n\n  render() {\n    return (\n      <div className=\"row\">\n        <div className=\"section-1\">\n          <Sidebar\n            getChecked={this.getChecked}\n            toggleChecked={this.toggleChecked}\n            addToVerbList={this.addToVerbList}\n            removeFromVerbList={this.removeFromVerbList}\n            getVerbList={this.getVerbList}\n          />\n        </div>\n        <div className=\"section-2\">\n          <Card\n            getChecked={this.getChecked}\n            getKeys={this.getKeys}\n            getVerbList={this.getVerbList} \n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}